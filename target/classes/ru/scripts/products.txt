feature - products. 
description of insurance products.
repositroy and api for them

example of json - 
{
  "id": 1202,
  "lob": "NS",
  "code": "NS-SRAVNIRU",
  "name": "НС Сравниру",
  "versionNo": 0,
  "versionStatus": "DEV",

  "activationDelay": {
    "minPeriod": "string",
    "maxPeriod": "string",
    "listOfPeriods": "string",
    "defaultValue": "string"
  },
  "policyTerm": {
    "minPeriod": "string",
    "maxPeriod": "string",
    "listOfPeriods": "string",
    "defaultValue": "P1Y"
  },

  "quoteValidator": [
    {
      "lineNr": 0,
      "keyLeft": "insAmount",
      "ruleType": "RANGE",
      "keyRight": "string",
      "valueRight": "10000-200000",
      "dataType": "NUMBER",
      "errorText": "Ошибка в страховой сумме"
    }
  ],
  "saveValidator": [
    {
      "lineNr": 0,
      "keyLeft": "insAmount",
      "ruleType": "RANGE",
      "keyRight": "string",
      "valueRight": "10000-200000",
      "dataType": "NUMBER",
      "errorText": "Ошибка в страховой сумме"
    }
  ],
  "packages": [
    {
      "code": "Basic",
      "name": "Простой",
      "covers": [
        {
          "code": "PD",
          "isMandatory": true,
          "delayPeriod": "P0D",
          "coverageTerm": "P1Y",
          "isDeductibleMandatory": false,
          "deductibles": [
            {
              "nr": 1,
              "deductibleType": "string",
              "deductible": 100,
              "deductibleUnit": "SUM",
              "deductibleSpecific": "EVERY"
            }
          ]
        }
      ]
    }
  ]
}


create table pt_products (id number primary key
, lob varchar(30) not null
, code varchar(30) not null unique
, name varchar(250) not null  
, prod_version_no number 
, dev_version_no number
, isDeleted boolean )

create table pt_product_versions( 
product_id number not null
, version_no number
, product jsonb not null )
product_id and version_no is a primary key

create a repository for this tables with find ById, findByCode


create service and comproler with api methods

get /admin/products return id, lob, code, name, prod_version_no, dev_version_no from repository pt_products

post /admin/products
body - json
precondition - json.lob, json.code, json.name is not empty
select id from sequence
prod_version_no = null, dev_version_no = 1, isDeleted = false
insert record into pt_products 
insert into pt_product_versions id, 1, json


get /admin/products/{id}/versions/{version_no} returns json from reposinory pt_product_versions with product_id = {id} and version_no = {version_no}

post /admin/products/{id}/versions/{version_no}/cmd/create create a new version of product as a copy of current version {version_no}
select a record from tp_products with id = {id}
is dev_version_no is not null then return error "only one version can be in dev status"
take the prod_version_no, insert into pt_product_versions ( {id}, prod_version_no +1, product json )

put /admin/products/{id}/versions/{version_no} replace json with new one. 
preconditions - select record from pt_products where id = {id} and dev_version_no = {version_no }
if record not found than return error "only dev version can be updated"

delete /admin/products/{id} update record, set isDeleted = true

delete /admin/products/{id}/versions/{version_no}
preconditions - select record from pt_products where id = {id} and dev_version_no = {version_no }
if record not found than return error "only dev version can be deleted"
delete record from pt_product_versions
